sampleValues = sample(115, replace = TRUE)
newResiduals = residuals[sampleValues]
newFitValues = fitValues + newResiduals
newSmoothValues = smoothValues + newResiduals
newG = sum((newFitValues - newSmoothValues)^2) / sigma
if (newG > G) {
counter = counter + 1
}
}
counter
counter = 0
for (i in 1:999) {
sampleValues = sample(115, replace = TRUE)
newResiduals = residuals[sampleValues]
newFitValues = fitValues + newResiduals
newSmoothValues = smoothValues + newResiduals
newG = sum((newFitValues - newSmoothValues)^2) / sigma
if (newG > G) {
counter = counter + 1
}
}
counter
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
for (i in 1:999) {
sampleValues = sample(115, replace = TRUE)
newResiduals = residuals[sampleValues]
newFitValues = fitValues + newResiduals
newSmoothValues = smoothValues + newResiduals
newG = sum((newFitValues - newSmoothValues)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
ufcgf
sample(residuals, replace = TRUE)
length(sample(residuals, replace = TRUE))
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
for (i in 1:999) {
sampleValues = sample(115, replace = TRUE)
newResiduals = residuals[sampleValues]
yStar = fitValues + newResiduals
linear = lm(yStar ~ response)
loess = loess(yStar ~ response)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
for (i in 1:999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ response)
loess = loess(yStar ~ response)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
69 /999
G
library(alr3)
data(ufcgf)
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor, span = 2/3)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
for (i in 1:999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ response)
loess = loess(yStar ~ response, span = 2/3)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
G
residuals
fitValues
smoothValues
set.seed(6)
for (i in 1:999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ response)
loess = loess(yStar ~ response, span = 2/3)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
sigma
sigma ^ 2
set.seed(6)
newResiduals = sample(residuals, replace = TRUE)
newResiduals
yStar = fitValues + newResiduals
yStar
linear = lm(yStar ~ response)
loess = loess(yStar ~ response, span = 2/3)
linear$fitted.values
response
ufcgf
library(alr3)
data(ufcgf)
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor, span = 2/3)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
set.seed(6)
for (i in 1:999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ predictor)
loess = loess(yStar ~ predictor, span = 2/3)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
library(alr3)
data(ufcgf)
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor, span = 2/3)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
set.seed(6)
for (i in 1:9999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ predictor)
loess = loess(yStar ~ predictor, span = 2/3)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter
library(nlme)
library(faraway)
data(divusa)
fitDiv <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
par(mfrow=c(1, 2))
plot(y = fitDiv$residuals, x = fitDiv$fitted.values, main = "The Model Lags Behind Changes in the Data", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0, col = "red")
plot(x = divusa$year, y = divusa$divorce, pch = 16, col = "blue", main = "Data and Fitted Values over Time", xlab = "Year", ylab = "Divorce Rate")
points(x = divusa$year, y = fitDiv$fitted.values, pch = 16, col = "red")
legend(x = 1920, y = 20, legend = c("data points", "fitted values"), fill = c("blue", "red"))
par(mfrow=c(1,1))
plot(x = fitDiv$residuals[-1], y = fitDiv$residuals[-nrow(divusa)], main = "Plot of Successive Residuals", xlab = "Residual i", ylab = "Residual i - 1")
par(mfrow=c(1, 2))
plot(y = fitDiv$residuals, x = fitDiv$fitted.values, main = "The Model Lags Behind Changes in the Data", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0, col = "red")
plot(x = divusa$year, y = divusa$divorce, pch = 16, col = "blue", main = "Data and Fitted Values over Time", xlab = "Year", ylab = "Divorce Rate")
fitGls <- gls(divorce ~ unemployed + femlab + marriage + birth + military, correlation = corAR1(form = ~year), data = divusa)
summary(fitGls)
intervals(fitGls)
print(intervals(fitGls))
source('~/Documents/School/College/Third Year/Fall/343/Teaching Scripts/SCRIPTS-SM6/SM6-1-gls.R')
fitGls <- gls(divorce ~ unemployed + femlab + marriage + birth + military,correlation=corAR1(form= ~year), data = divusa)
summary(fitGls)
interval(fitGLS)
intervals(fitGLS)
fitGlS <- gls(divorce ~ unemployed + femlab + marriage + birth + military,correlation=corAR1(form= ~year), data = divusa)
summary(fitGls)
intervals(fitGLS)
fitGLS <- gls(divorce ~ unemployed + femlab + marriage + birth + military,correlation=corAR1(form= ~year), data = divusa)
summary(fitGls)
intervals(fitGLS)
summary(fitGLS)
intervals(fitGLS)
intervals.gls(fitGLS)
library(nlme)
intervals.gls(fitGLS)
interval.gls(fitGLS)
intervalsGLS(fitGLS)
intervals.gls(fitGLS)
intervals(fitGLS)
class(fitGLS)
str(fitGLS)
intervals(fitGLS$varBeta)
intervals(fitGLS)
library(faraway)
data(cars)
fitCars <- lm(dist ~ speed, data = cars)
fitGroups <- lm(dist ~ factor(speed), data = cars)
plot(cars$speed, cars$dist, main = "Testing Lack of Fit", xlab = "The speed of the Car", ylab = "Distance Needed to Stop", col = "blue", pch = 16)
abline(fitCars)
points(x = cars$speed, y = fitGroups$fitted.values, col = "red")
anova(fitCars, fitGroups)
summary(fitCars)
summary(fitGroups)
library(faraway)
library(MASS)
library(quantreg)
data(stackloss)
fitLS <- lm(stack.loss ~ ., data = stackloss)
fitLAD <- rq(stack.loss ~ ., data = stackloss)
fitHuber <- rlm(stack.loss ~ ., data = stackloss)
fitTrim <- ltsreg(stack.loss ~ ., data = stackloss, nsamp = "exact")
fitTrim$beta
fitTrim$Beta
fitTrim$coef
pairs(nlme)
pairs(divusa)
par(mfrow(c(1,2)))
par(mfrow=(c(1,2)))
plot(divusa$year, divusa$birth)
plot(divusa$year, divusa$divorce)
pairs(divusa)
fitGLS <- gls(divorce ~ unemployed + femlab + marriage + birth + military,correlation=corAR1(form= ~year), method = "ML", data = divusa)
summary(fitGLS)
intervals(fitGLS)
fitLS <- lm(stack.loss ~ ., data = stackloss)
fitLAD <- rq(stack.loss ~ ., data = stackloss)
fitHuber <- rlm(stack.loss ~ ., data = stackloss)
fitTrim <- ltsreg(stack.loss ~ ., data = stackloss, nsamp = "exact")
fitLS$coef
fitLAD$coef
firHuber$coef
fitHuber$coef
fitTrim$coef
summary(fitLAD)
library(alr3)
data(ufcgf)
predictor = ufcgf[,4]
response = ufcgf[,5]
fit <- lm(response ~ predictor)
fitValues = fit$fitted.values
sigma <- summary(fit)$sigma
smooth <- loess(response ~ predictor, span = 2/3)
smoothValues = smooth$fitted
G = sum((fitValues - smoothValues)^2) / sigma^2
residuals = fit$residuals
counter = 0
set.seed(6)
for (i in 1:9999) {
newResiduals = sample(residuals, replace = TRUE)
yStar = fitValues + newResiduals
linear = lm(yStar ~ predictor)
loess = loess(yStar ~ predictor, span = 2/3)
newG = sum((linear$fitted.values - loess$fitted)^2) / sigma^2
if (newG > G) {
counter = counter + 1
}
}
counter / 9999
counter
plot(y = fitDiv$residuals, x = fitDiv$year)
length(fitDiv$residuals)
nrow(divusa)
length(fitDiv$year)
plot(y = fitDiv$residuals, x = divusa$year)
par(mfrow=c(1,1))
plot(y = fitDiv$residuals, x = divusa$year)
plot(y = fitDiv$residuals, x = divusa$year, main = "Residuals Over Time", xlab = "Year", ylab = "Residuals")
abline(0,0,col = "red")
plot(y = fitDiv$residuals, x = divusa$year, main = "Residuals Over Time", xlab = "Year", ylab = "Residuals", type = "o")
abline(0,0,col = "red")
par(mfrow=c(1, 2))
plot(y = fitDiv$residuals, x = fitDiv$fitted.values, main = "The Model Lags Behind Changes in the Data", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0, col = "red")
plot(x = divusa$year, y = divusa$divorce, pch = 16, col = "blue", main = "Data and Fitted Values over Time", xlab = "Year", ylab = "Divorce Rate")
par(mfrow=c(1,1))
plot(x = fitDiv$residuals[-1], y = fitDiv$residuals[-nrow(divusa)], main = "Plot of Successive Residuals", xlab = "Residual i", ylab = "Residual i - 1")
par(mfrow=c(1,1))
plot(y = fitDiv$residuals, x = divusa$year, main = "Residuals Over Time", xlab = "Year", ylab = "Residuals", type = "o")
abline(0,0,col = "red")
fitGLS <- gls(divorce ~ unemployed + femlab + marriage + birth + military,correlation=corAR1(form= ~year), method = "ML", data = divusa)
summary(fitGLS)
intervals(fitGLS)
intervals(fitGLS)[1]
intervals(fitGLS)[2]
summary(fitDiv)
summary(fitDiv)$coefficients
```
intervals(fitGLS)[2]
summary(fitGLS)
intervals(fitGLS)
intervals(fitGLS)[1]
summary(fitGLS)
summary(fitGLS)$coefficients
summary(fitGLS)[3]
summary(fitGLS)[2]
summary(fitGLS)[1]
summary(fitDiv)$coefficients
intervals(fitGLS)[1]
summary(fitDiv)$coefficients
intervals(fitGLS)[1]
6.470590e-02
intervals(fitGLS, 0.95)[1]
plot(divusa$year, divusa$divorce)
points(divusa$year, fitDiv$fitted, values, col = "red", pch = 16)
plot(divusa$year, divusa$divorce)
points(divusa$year, fitDiv$fitted.values, col = "red", pch = 16)
legend(1920, 15, legend = c("Actual Data", "Predicted Values"), col = c("blue", "red"))
legend(1920, 15, legend = c("Actual Data", "Predicted Values"), fill = c("blue", "red"))
plot(divusa$year, divusa$divorce, col = "blue", pch = 16)
points(divusa$year, fitDiv$fitted.values, col = "red", pch = 16)
legend(1920, 15, legend = c("Actual Data", "Predicted Values"), fill = c("blue", "red"))
j = c(2, 3, 4, 5, 10)
t = log(j^2)
V = 3 - 3 * exp(-t/2)
W = 2 + 3 * exp(-t/2)
plot(x = V, y = W, main = "Trajectory of V and W over time", type = "o")
rbind(LeastSquares, LeastAbsoluteDeviations, Hube, LeastTrimmedSquares)
LeastSquares = fitLS$coef
LeastAbsoluteDeviations = fitLAD$coef
Huber = fitHuber$coef
LeastTrimmedSquares = fitTrim$coef
rbind(LeastSquares, LeastAbsoluteDeviations, Hube, LeastTrimmedSquares)
rbind(LeastSquares, LeastAbsoluteDeviations, Huber, LeastTrimmedSquares)
head(stackloss)
summary(fitLS)
summary(fitLAD)
fitLAD
str(fitLAD)
sum(fitLAD$residuals)
sum(fitLS$residuals)
fitLS$residuals
sum(abs(fitLS$residuals))
sum(abs(fitLAD$residuals))
sum(abs(fitHuber$residuals))
sum(abs(fitTrim$residuals))
studentRes <- studres(fitLS)
studentRes
nrow(stackloss)
sorted(studentRes)
sort(studentRes)
sort(abs(studentRes))
sort(abs(studentRes), decreasing = FALSE)
sort(abs(studentRes), decreasing = TRUE)
sort(abs(studentRes), decreasing = TRUE)[1:4]
cook <- cooks.distance(fitLS)
cook
halfnorm(cook, 4)
dataPoints = c(2, 5:20)
reducedData = stackloss[dataPoints,]
nrow(reducedData)
fitReduced <- lm(stack.loss ~ ., data = reducedData)
fitReduced$coef
sum(abs(fitReduced$residuals))
summary(fitLS)
3.243 * 17
sum(abs(fitLS$residuals))
fitReduced$coef
rbind(LeastSquares, LeastAbsoluteDeviations, Huber, LeastTrimmedSquares)
dataPoints1 = c(1:20)
reducedData = stackloss[dataPoints1,]
fitReduced <- lm(stack.loss ~ ., data = reducedData)
fitReduced$coef
dataPoints = c(2, 5:20)
reducedData = stackloss[dataPoints,]
fitReduced <- lm(stack.loss ~ ., data = reducedData)
fitReduced$coef
rbind(LeastSquares, LeastAbsoluteDeviations, Huber, LeastTrimmedSquares)
dataPoints = c(2, 5:20)
reducedData = stackloss[dataPoints,]
fitReduced <- lm(stack.loss ~ ., data = reducedData)
fitReduced$coef
rbind(LeastSquares, LeastAbsoluteDeviations, Huber, LeastTrimmedSquares)
dataPoints1 = c(1:20)
reducedData1 = stackloss[dataPoints1,]
fitReduced1 <- lm(stack.loss ~ ., data = reducedData1)
fitReduced1$coef
rbind(LeastSquares, LeastAbsoluteDeviations, Huber, LeastTrimmedSquares)
set.seed(6)
max = max(rnorm(1000000))
max
max2 = max(rnorm(10000000))
max2
max3 = max(rnorm(100000000))
bigMoney = function() {
max = max(abs(rnorm(100000000)))
return max
}
bigMoney = function() {
max = max(abs(rnorm(100000000)))
return(max)
}
bigMoney
bigMoney
function = bigMoney() {
max = max(abs(rnorm(100000000)))
return(max)
}
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
pnorm(6.24)
pnorm(6.24, lower.tail = FALSE)
1 / pnorm(6.24, lower.tail = FALSE)
max(abs(norm(100000000)))
max(abs(norm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
max(abs(rnorm(100000000)))
1 / pnorm(6.784778, lower.tail = FALSE)
pnorm(7)
pnorm(7, lower.tail = FALSE)
1 / pnorm(7, lower.tail = FALSE)
source('~/Documents/Non-School/Data Science/Linear Algebra/GaussianElimination.R')
setwd("~/Documents/Non-School/Data Science/Web Scraper/Chicago Houses")
trulia = read.csv("Data/trulia-info.csv")
trulia = read.csv("Data/trulia-info.csv", quote = "", row.names = NULL, stringsAsFactors = FALSE)
trulia = read.csv("Data/trulia-info.csv", quote = "", stringsAsFactors = FALSE)
head(trulia)
trulia = read.csv("Data/trulia-info.csv")
trulia = read.csv("Data/trulia-info.csv", header = TRUE)
trulia = read.csv("Data/trulia-info.csv", header = TRUE, quote = NULL)
trulia = read.csv("Data/trulia-info.csv", header = TRUE, quote = "")
trulia = read.csv("Data/trulia-info.csv", header = TRUE, quote = '')
trulia = read.csv("Data/trulia-info.csv", header = TRUE, comment = '')
trulia = read.csv("Data/trulia-info.csv", header = TRUE, comment = '', quote = NULL)
trulia = read.csv("Data/trulia-info.csv", header = TRUE, comment = '', quote = "")
trulia = read.table("Data/trulia-info.csv", header = TRUE)
trulia = read.table("Data/trulia-info.csv")
trulia = read.csv2("Data/trulia-info.csv")
trulia = read.csv("Data/trulia-info.csv")
head(trulia)
head(trulia)
str(trulia)
levels(trulia$House.Type)
sum(is.na(trulia$Size.in.Square.Feet))
sum(is.na(trulia$Price))
sqftData = trulia[!is.na(trulia$Size.in.Square.Feet), c("Price", "Size.in.Square.Feet")]
plot(y = sqftData$Price, x = sqftData$Size.in.Square.Feet)
plot(y = sqftData$Price, x = sqftData$Size.in.Square.Feet, col = "Neighborhood")
plot(y = sqftData$Price, x = sqftData$Size.in.Square.Feet)
fit1 = lm(Price ~ Size.in.Square.Feet, data = sqftData)
abline(fit1)
abline(fit1, col = "red")
summary(fit1)
summary(trulia$Neighborhood)
summary(trulia$Neighborhood)
sort(table(trulia$Neighborhood))
fit2 = lm(Price ~ Neighborhood, data = trulia)
summary(fit2)
summary(fit1)
fit3 = lm(Price ~ Neighborhood + Size.in.Square.Feet, data = sqftData)
sqftData = trulia[!is.na(trulia$Size.in.Square.Feet), c("Price", "Neighborhood" "Size.in.Square.Feet")]
sqftData = trulia[!is.na(trulia$Size.in.Square.Feet), c("Price", "Neighborhood", "Size.in.Square.Feet")]
fit3 = lm(Price ~ Neighborhood + Size.in.Square.Feet, data = sqftData)
summary(fit3)
tapply(trulia$Price, trulia$Neighborhood, mean)
sort(tapply(trulia$Price, trulia$Neighborhood, mean))
